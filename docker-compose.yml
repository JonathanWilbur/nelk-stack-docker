version: '3.7'

networks:

  elk:
    external: 'false'

services:

  # curator:
  #   build: './build/curator'
  #   container_name: 'elk-curator'
  #   depends_on:
  #     - 'elasticsearch'
  #   hostname: 'curatorhost'
  #   networks:
  #     - 'elk'
  #   restart: 'unless-stopped'
  #   volumes:
  #     - './configuration/curator/actions.yml:/actions.yml:ro'
  #     - './configuration/curator/config.yml:/config.yml:ro'

  # See: https://www.elastic.co/guide/en/elasticsearch/reference/6.4/docker.html.
  elasticsearch:
    container_name: 'elk-elasticsearch'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200" ]
      interval: '1m'
      timeout: '10s'
      retries: 3
      start_period: '1m'
    hostname: 'eshost'
    image: 'elasticsearch:6.5.1'
    networks:
      - 'elk'
    # ports:
    #   - '9200:9200'
    #   - '9300:9300'
    restart: 'always'
    volumes:
      - './configuration/elasticsearch/config.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro'
      - './data/elasticsearch/data:/usr/share/elasticsearch/data'
      - './data/elasticsearch/logs:/usr/share/elasticsearch/logs'

  # See: https://www.elastic.co/guide/en/kibana/current/docker.html.
  kibana:
    container_name: 'elk-kibana'
    depends_on:
      - 'elasticsearch'
    # See: https://www.elastic.co/guide/en/kibana/current/settings.html.
    environment:
      SERVER_NAME: 'kibana.example.org'
      SERVER_PORT: '5601'
      ELASTICSEARCH_URL: 'http://elasticsearch:9200'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5601" ]
      interval: '1m'
      timeout: '10s'
      retries: 3
      start_period: '1m'
    hostname: 'kibanahost'
    image: 'kibana:6.5.1'
    networks:
      - 'elk'
    # ports:
    #   - '5601:5601'
    restart: 'unless-stopped'
    volumes:
      - './configuration/kibana/config.yml:/usr/share/kibana/config/kibana.yml:ro'

  # Currently experimental. Uncomment at your peril.
  # letsencrypt:
  #   cap_add:
  #     - 'NET_ADMIN'
  #   container_name: 'letsencrypt'
  #   environment:
  #     PGID: '1000'
  #     PUID: '1000'
  #     EMAIL: 'email'
  #     URL: 'example.com'
  #     SUBDOMAINS: 'www,ftp'
  #     VALIDATION: 'http'
  #     TZ: 'America/New_York'
  #     ONLY_SUBDOMAINS: 'false'
  #   hostname: 'letsencrypthost'
  #   image: 'linuxserver/letsencrypt:latest'
  #   ports:
  #     - '443:443'
  #     - '80:80'
  #   restart: 'unless-stopped'
  #   volumes:
  #     - './data/letsencrypt:/config'

  # See: https://www.elastic.co/guide/en/logstash/current/docker-config.html.
  logstash:
    container_name: 'elk-logstash'
    depends_on:
      - 'elasticsearch'
    # This uses the monitoring API: https://www.elastic.co/guide/en/logstash/current/monitoring.html
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9600" ]
      interval: '1m'
      timeout: '10s'
      retries: 3
      start_period: '1m'
    hostname: 'logstashhost'
    image: 'logstash:6.5.1'
    networks:
      - 'elk'
    ports:
      - '8888:8888'
    restart: 'unless-stopped'
    volumes:
      - './configuration/logstash/config.yml:/usr/share/logstash/config/logstash.yml:ro'
      - './configuration/logstash/pipeline:/usr/share/logstash/pipeline:ro'
      - './data/logstash/logs:/usr/share/logstash/logs'

  nginx:
    container_name: 'elk-nginx'
    depends_on:
      - 'kibana'
    hostname: 'nginxhost'
    image: 'nginx:latest'
    networks:
      - 'elk'
    ports:
      # - '8080:80'
      - '4443:443'
    restart: 'unless-stopped'
    volumes:
      - './configuration/nginx/nginx.conf:/etc/nginx/nginx.conf:ro'
      - './configuration/nginx/cert.pem:/cert.pem:ro'
      - './configuration/nginx/key.pem:/key.pem:ro'
      - './configuration/nginx/htpasswd:/.htpasswd:ro'