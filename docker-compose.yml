version: '3.7'

configs:
  curator_actions:
    file: './configuration/curator/actions.yml'
  curator_config:
    file: './configuration/curator/config.yml'
  elasticsearch_config:
    file: './configuration/elasticsearch/config.yml'
  kibana_config:
    file: './configuration/kibana/config.yml'
  logstash_config:
    file: './configuration/logstash/config.yml'
  logstash_pipeline:
    file: './configuration/logstash/pipeline'
  nginx_conf:
    file: './configuration/nginx/nginx.conf'
  tls_cert:
    file: './configuration/nginx/cert.pem'
  tls_key:
    file: './configuration/nginx/key.pem'
  nginx_htpasswd:
    file: './configuration/nginx/htpasswd'

networks:

  curating:
    external: false
  logstashing:
    external: false
  kibana:
    external: false
  proxying:
    external: false

services:

  # curator:
  #   build: './build/curator'
  #   container_name: 'elk-curator'
  #   depends_on:
  #     - 'elasticsearch'
  #   hostname: 'curatorhost'
  #   labels:
  #     github: 'https://github.com/elastic/curator'
  #     homepage: 'https://www.elastic.co/blog/curator-tending-your-time-series-indices'
  #   networks:
  #     - 'curating'
  #   restart: 'unless-stopped'
  #   volumes:
  #     - './configuration/curator/actions.yml:/actions.yml:ro'
  #     - './configuration/curator/config.yml:/config.yml:ro'

  # See: https://www.elastic.co/guide/en/elasticsearch/reference/6.4/docker.html.
  elasticsearch:
    container_name: 'elk-elasticsearch'
    dns_search: "${DOMAIN}"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200" ]
      interval: '1m'
      timeout: '10s'
      retries: 3
      start_period: '1m'
    hostname: 'eshost'
    image: 'elasticsearch:6.5.1'
    init: false
    labels:
      github: 'https://github.com/elastic/elasticsearch'
      homepage: 'https://www.elastic.co/products/elasticsearch'
    networks:
      - 'curating'
      - 'logstashing'
      - 'kibana'
    # ports:
    #   - '9200:9200/tcp'
    #   - '9300:9300/tcp'
    restart: 'always'
    # See: https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html.
    # sysctls:
    #   vm.max_map_count: 262144
    # See: https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html.
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - './configuration/elasticsearch/config.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro'
      - './data/elasticsearch/data:/usr/share/elasticsearch/data'
      - './data/elasticsearch/logs:/usr/share/elasticsearch/logs'

  # See: https://www.elastic.co/guide/en/kibana/current/docker.html.
  kibana:
    container_name: 'elk-kibana'
    depends_on:
      - 'elasticsearch'
    dns_search: "${DOMAIN}"
    # See: https://www.elastic.co/guide/en/kibana/current/settings.html.
    environment:
      SERVER_NAME: 'kibana.example.org'
      SERVER_PORT: '5601'
      ELASTICSEARCH_URL: 'http://elasticsearch:9200'
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5601" ]
      interval: '1m'
      timeout: '10s'
      retries: 3
      start_period: '1m'
    hostname: 'kibanahost'
    image: 'kibana:6.5.1'
    init: false
    labels:
      github: 'https://github.com/elastic/kibana'
      homepage: 'https://www.elastic.co/products/kibana'
    networks:
      - 'kibana'
      - 'proxying'
    # ports:
    #   - '5601:5601/tcp'
    restart: 'unless-stopped'
    volumes:
      - './configuration/kibana/config.yml:/usr/share/kibana/config/kibana.yml:ro'

  # Currently experimental. Uncomment at your peril.
  # letsencrypt:
  #   cap_add:
  #     - 'NET_ADMIN'
  #   container_name: 'letsencrypt'
  #   dns_search: "${DOMAIN}"
  #   environment:
  #     PGID: '1000'
  #     PUID: '1000'
  #     EMAIL: 'email'
  #     URL: 'example.com'
  #     SUBDOMAINS: 'www,ftp'
  #     VALIDATION: 'http'
  #     TZ: 'America/New_York'
  #     ONLY_SUBDOMAINS: 'false'
  #   hostname: 'letsencrypthost'
  #   image: 'linuxserver/letsencrypt:latest'
  #   init: false
  #   labels:
  #     homepage: 'https://letsencrypt.org/'
  #   ports:
  #     - '443:443/tcp'
  #     - '80:80/tcp'
  #   restart: 'unless-stopped'
  #   volumes:
  #     - './data/letsencrypt:/config'

  # See: https://www.elastic.co/guide/en/logstash/current/docker-config.html.
  logstash:
    container_name: 'elk-logstash'
    depends_on:
      - 'elasticsearch'
    dns_search: "${DOMAIN}"
    # This uses the monitoring API: https://www.elastic.co/guide/en/logstash/current/monitoring.html
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9600" ]
      interval: '1m'
      timeout: '10s'
      retries: 3
      start_period: '1m'
    hostname: 'logstashhost'
    image: 'logstash:6.5.1'
    init: false
    labels:
      github: 'https://github.com/elastic/logstash'
      homepage: 'https://www.elastic.co/products/logstash'
    networks:
      - 'logstashing'
    ports:
      - '8888:8888/tcp'
    restart: 'unless-stopped'
    volumes:
      - './configuration/logstash/config.yml:/usr/share/logstash/config/logstash.yml:ro'
      - './configuration/logstash/pipeline:/usr/share/logstash/pipeline:ro'
      - './data/logstash/logs:/usr/share/logstash/logs'

  nginx:
    # Thank you, coldfix: https://stackoverflow.com/questions/43467670/which-capabilities-can-i-drop-in-a-docker-nginx-container
    cap_add:
      - 'CHOWN'
      - 'DAC_OVERRIDE'
      - 'SETGID'
      - 'SETUID'
    cap_drop:
      - 'ALL'
    container_name: 'elk-nginx'
    depends_on:
      - 'kibana'
    dns_search: "${DOMAIN}"
    hostname: 'nginxhost'
    image: 'nginx:alpine'
    init: false
    labels:
      github: 'https://github.com/nginx/nginx'
      homepage: 'https://nginx.org/'
    networks:
      - 'proxying'
    ports:
      # - '8080:80/tcp'
      - '4443:4443/tcp'
    restart: 'unless-stopped'
    volumes:
      - './configuration/nginx/nginx.conf:/etc/nginx/nginx.conf:ro'
      - './configuration/nginx/cert.pem:/cert.pem:ro'
      - './configuration/nginx/key.pem:/key.pem:ro'
      - './configuration/nginx/htpasswd:/.htpasswd:ro'